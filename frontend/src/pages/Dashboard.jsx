import React, { useEffect, useState, useContext } from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import '../assets/fonts/THSarabunNew-normal.js';
import { AuthContext } from '../context/AuthContext';

const API_URL = import.meta.env.VITE_API_URL;

export default function Dashboard() {
  const [patients, setPatients] = useState([]);
  const [hn, setHn] = useState('');
  const [selectedPatient, setSelectedPatient] = useState(null);
  const { token } = useContext(AuthContext);

  // Log component mount
  useEffect(() => {
    console.log('üè† Dashboard mounted');
    console.log('üîë Auth token available:', !!token);
  }, []);

  const fetchPatients = () => {
    if (!token) {
      console.warn('‚ö†Ô∏è No token available for fetching patients');
      return;
    }
    
    console.log('üì° Fetching patients from API...');
    fetch(`${API_URL}/api/patients`, {
      headers: { 'Authorization': `Bearer ${token}` }
    })
      .then(res => {
        console.log('üìä Patients API response:', {
          status: res.status,
          statusText: res.statusText,
          ok: res.ok
        });
        return res.json();
      })
      .then(data => {
        if (data.error) {
          console.error('‚ùå Error fetching patients:', data.error);
          setPatients([]);
        } else {
          console.log('‚úÖ Patients fetched successfully:', {
            count: data.length,
            patients: data.map(p => ({ hn: p.hn, name: `${p.firstName} ${p.lastName}` }))
          });
          setPatients(data);
        }
      })
      .catch(error => {
        console.error('üí• Error in fetchPatients:', error);
        setPatients([]);
      });
  };

  useEffect(() => {
    console.log('üîÑ Token changed, refetching patients');
    fetchPatients();
  }, [token]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏° HN
  const handleSearch = () => {
    if (!token || !hn) {
      console.warn('‚ö†Ô∏è Search skipped:', { hasToken: !!token, hasHn: !!hn });
      return;
    }
    
    console.log('üîç Searching for patient:', { hn });
    fetch(`${API_URL}/api/patients/${hn}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    })
      .then(res => {
        console.log('üì° Patient search API response:', {
          status: res.status,
          statusText: res.statusText,
          ok: res.ok
        });
        return res.json();
      })
      .then(data => {
        if (data.error) {
          console.error('‚ùå Patient search error:', data.error);
          setSelectedPatient(null);
        } else {
          console.log('‚úÖ Patient found:', {
            hn: data.hn,
            name: `${data.firstName} ${data.lastName}`,
            diagnosis: data.diagnosis
          });
          setSelectedPatient(data);
        }
      })
      .catch(error => {
        console.error('üí• Error in patient search:', error);
        setSelectedPatient(null);
      });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô export PDF
  const exportPDF = () => {
    console.log('üìÑ Exporting PDF:', {
      patientCount: patients.length,
      timestamp: new Date().toISOString()
    });
    
    try {
      const doc = new jsPDF();
      doc.setFont('THSarabunNew');
      doc.setFontSize(16);
      doc.text('‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢', 14, 16);
      autoTable(doc, {
        startY: 22,
        head: [['HN', '‡∏ä‡∏∑‡πà‡∏≠', '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢']],
        body: patients.map(p => [p.hn, p.firstName, p.lastName, p.diagnosis]),
        styles: { font: 'THSarabunNew', fontStyle: 'normal', fontSize: 14 },
        headStyles: { font: 'THSarabunNew', fontStyle: 'normal', fontSize: 14 }
      });
      doc.save('patients.pdf');
      console.log('‚úÖ PDF exported successfully');
    } catch (error) {
      console.error('üí• PDF export error:', error);
    }
  };

  const handleHnChange = (value) => {
    console.log('‚úèÔ∏è HN input changed:', { value, length: value.length });
    setHn(value);
  };

  return (
    <div style={{ padding: 24 }}>
      <h1>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (Demo)</h1>
      <div style={{ marginBottom: 16 }}>
        <input
          value={hn}
          onChange={e => handleHnChange(e.target.value)}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ HN ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
        />
        <button 
          onClick={() => {
            console.log('üîç Search button clicked');
            handleSearch();
          }}
        >
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        </button>
      </div>
      {selectedPatient && (
        <div style={{ border: '1px solid #ccc', padding: 16, marginBottom: 16 }}>
          <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ HN: {selectedPatient.hn}</h2>
          <div>‡∏ä‡∏∑‡πà‡∏≠: {selectedPatient.firstName} {selectedPatient.lastName}</div>
          <div>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢: {selectedPatient.diagnosis}</div>
          <div>‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: {JSON.stringify(selectedPatient.treatmentPlan)}</div>
        </div>
      )}
      <h2>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({patients.length} ‡∏Ñ‡∏ô)</h2>
      <button 
        onClick={() => {
          console.log('üìÑ Export PDF button clicked');
          exportPDF();
        }} 
        style={{ marginBottom: 8 }}
      >
        Export PDF
      </button>
      <table border="1" cellPadding="8">
        <thead>
          <tr>
            <th>HN</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
            <th>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢</th>
          </tr>
        </thead>
        <tbody>
          {patients.map(p => (
            <tr key={p.hn}>
              <td>{p.hn}</td>
              <td>{p.firstName}</td>
              <td>{p.lastName}</td>
              <td>{p.diagnosis}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
} 